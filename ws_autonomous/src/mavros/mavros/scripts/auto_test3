#!/usr/bin/env python

import rospy
import _thread
import threading
import time
import mavros
import Camera
import subprocess
import re
import os
import shutil
import tf
import math
import multiprocessing

from math import *
from mavros.utils import *
from mavros_msgs.msg import State, ParamValue, WaypointReached, GlobalPositionTarget, Altitude
from mavros_msgs.srv import ParamSet
#from geographic_msgs.msg import GeoPoseStamped
from sensor_msgs.msg import NavSatFix, Imu
from haversine import haversine, Unit
from std_msgs.msg import Float64


class WaypointMission:
    """
    This class sends position targets to FCU's position controller
    """
    
    
    def __init__(self):
        rospy.init_node('auto_test3')
        mavros.set_namespace()

        # ROS topics to verify state
        self.current_state = State()
        rospy.Subscriber('/mavros/state', State, self.state_callback)

        self.pub = rospy.Publisher('/mavros/setpoint_raw/global', GlobalPositionTarget, queue_size=1)
        while self.pub.get_num_connections() == 0:
            rospy.sleep(.1)

        # writing file variable
        self.attitude_time = []
        self.deliver_payload_time = []
        self.geotag_time = []
        self.search_area_waypoint_time = []
        self.subprocess_execute_time = []
        self.waypoint_lap_time = []
        self.payload_delivery_time = []

        # declaring initial variable
        self.pitch = 0.0
        self.roll = 0.0
        self.yaw = 0.0
        self.lat = 0.0
        self.lon = 0.0
        self.alt = 10.0
        self.drone_sensory = [self.pitch, self.roll, self.yaw, self.lat, self.lon, self.alt]
        self.current_waypoint_index = -1
        self.waypoint_reached_event = threading.Event()

        # Lat, Lon, Alt
        self.waypoints = [
            (21.4002848, -157.7646783, 22.68),
            (21.4005753, -157.7641225, 22.68)
        ]

        # Lat, Lon, Alt
        self.search_area_waypoints = [
            (21.4003387, -157.7644886, 22.68),
            (21.4003587, -157.7645791, 22.68),
            (21.4002894, -157.7645302, 22.68)
        ]

        # Lat, Lon, Compartment num
        self.payload_delivery_waypoints = [

        ]

        self.end_mission_latitude = 21.4003681
        self.end_mission_longitude = -157.7640635
        self.end_mission_altitude = 22
        
        rospy.Subscriber('/mavros/mission/reached', WaypointReached, self.reached_callback)

        rospy.loginfo("AUTONOMOUS SCRIPT IS READY!")

        
    def state_callback(self, msg):
        """
        ROS callback function to return the state of UAS
        
        """

        self.current_state = msg
        
    def reached_callback(self, msg):
        """
        ROS callback function to return the state of UAS
        
        """
        rospy.loginfo(f"Waypoint {self.current_waypoint_index} reached")
        self.current_waypoint_index += 1
        self.waypoint_reached_event.set()  # Signal that the waypoint is reached


    def is_armed(self):
        """
        Check if the UAS is "ARMED" mode.

        Loops until UAS is ARMED
        """  
        rospy.loginfo("Waiting to be ARMED...")
        while not(self.current_state.armed):
            rospy.loginfo("Waiting to be ARMED...")
            #rospy.loginfo(self.current_state)
            rospy.sleep(1)
            
        rospy.loginfo("ARMED")
        rospy.sleep(1)



    def is_guided(self):
        """
        Check if the UAS is "GUIDED" mode.

        Loops until UAS is GUIDED
        """  
        rospy.loginfo("Waiting to be GUIDED")
        while not (self.current_state.mode == "GUIDED"):
            rospy.loginfo("Waiting to be GUIDED...")
            #rospy.loginfo(self.current_state)
            rospy.sleep(1)
        rospy.loginfo("GUIDED")
        rospy.loginfo("!------------------ MISSION STARTING ----------------------!")

    def euler_quaternion(self, quaternion):
        """
        Convert quaternion (x, y, z, w) to Euler angles (roll, pitch, yaw) in degrees.
        """
        euler = tf.transformations.euler_from_quaternion([
            quaternion.x,
            quaternion.y,
            quaternion.z,
            quaternion.w
        ])
        return math.degrees(euler[0]), math.degrees(euler[1]), math.degrees(euler[2])

    def attitude(self):
        """
        Pulls attitude from UAS using MAVROS topics

        Saves information drone_sensory array
        """
        start = time.time()

        # Get the latest IMU data (orientation)
        imu_msg = rospy.wait_for_message("/mavros/imu/data", Imu, timeout=5)
        self.roll, self.pitch, self.yaw = self.euler_quaternion(imu_msg.orientation)

        # Get the latest GPS data (lat, lon)
        gps_msg = rospy.wait_for_message("/mavros/global_position/global",NavSatFix, timeout=5)
        self.lat, self.lon = gps_msg.latitude, gps_msg.longitude

        rel_alt_msg = rospy.wait_for_message("/mavros/global_position/rel_alt", Float64, timeout=5)
        self.alt = rel_alt_msg.data

        self.drone_sensory = [self.pitch, self.roll, self.yaw, self.lat, self.lon, self.alt]

        rospy.loginfo(f"\nRoll: {self.roll}\nPitch: {self.pitch}\nYaw: {self.yaw}\nlat: {self.lat}\nlon: {self.lon}\naltitude: {self.alt}")
        rospy.loginfo(f"(Attitude Array: {self.drone_sensory}")

        end = time.time()
        difference = end - start
        self.attitude_time.append(difference)
        rospy.loginfo("Drone Sensory data collected")


    def geotag(self, image_name):
        """
        Geotag an image with sensory data.

        This method geotags a photo with attitude (pitch, roll, yaw) and GPS (latitude, longitude, altitude)
        information.

        :param filename: The filename of the image to geotag.
        :param drone_sensory: The drone sensory data.
        :return: None
        """
        
        start = time.time()
        # Geotagging photo with the attitude and GPS coordinate
        self.attitude()
        pyr = ('pitch:' + str(self.drone_sensory[0]) + ' yaw:' + str(self.drone_sensory[2]) + ' roll:' + str(self.drone_sensory[1]))
        print(pyr)
        print( self.drone_sensory[3])
        tag_pyr_command = ('/usr/bin/exiftool','-overwrite_original', '-comment=' + str(pyr), str(image_name))
        tag_lat_command = ('exiftool', '-overwrite_original', '-exif:gpslatitude=' + '\'' + str(self.drone_sensory[3]) + '\'', str(image_name))
        tag_long_command = ('exiftool','-overwrite_original', '-exif:gpslongitude=' + '\'' + str(self.drone_sensory[4]) + '\'', str(image_name))
        tag_alt_command = ('exiftool','-overwrite_original', '-exif:gpsAltitude=' + '\'' + str(self.drone_sensory[5]) + '\'', str(image_name))
        #self.image_number += 1 
        #executing the tag command in ssh

        # DEBUGGING
        '''
        subprocess.run(tag_pyr_command,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        subprocess.run(tag_lat_command,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        subprocess.run(tag_long_command,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        subprocess.run(tag_alt_command,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        '''

        p1 = multiprocessing.Process(target = self.subprocess_execute, args = (tag_pyr_command,))
        p2 = multiprocessing.Process(target = self.subprocess_execute, args = (tag_lat_command,))
        p3 = multiprocessing.Process(target = self.subprocess_execute, args = (tag_long_command,))
        p4 = multiprocessing.Process(target = self.subprocess_execute, args = (tag_alt_command,))
        
        p1.start()
        time.sleep( 1 )
        p2.start()
        time.sleep( 1 )
        p3.start()
        time.sleep( 1 )
        p4.start()
        
        p1.join()
        p2.join()
        p3.join()
        p4.join()
        

        end = time.time()
        difference = end - start
        self.geotag_time.append(difference)
        return print(f"{image_name} GEOTAGGED")
        
        #DEBUGGING
        #return print("Dummy print")

    def subprocess_execute(self, command):
        """
        Execute a subprocess command with the provided arguments and record the execution time.

        Args:
            command (str): The subprocess command to execute.

        Returns:
            None
        """
        start = time.time()
        result = subprocess.run(command,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        end = time.time()
        difference = end - start
        self.subprocess_execute_time.append(difference)

        print(f"Command executed: {' '.join(command)}")
        print(f"STDOUT: {result.stdout}")
        print(f"STDERR: {result.stderr}")

        if result.returncode != 0:
            rospy.logerr(f"Subprocess command failed: {result.stderr}")
        else:
            rospy.loginfo(f"Subprocess command successful: {result.stdout}")
        
    def RTL_stat( self ):
        """
        Check if the UAS is in "Return to Launch" mode.

        Returns:
            bool: True if the UAS is in RTL mode, False otherwise.
        """

        if self.current_state.mode == "RTL":
            return True
        return False
    
    def gpio_servo_command( self, servo_x, angle ):
        """
        Triggers servo using i2c protocol using adafruit_servokit library
        servo_x: servo number
        angle: angle of the servo (0 to close, 120 to open)
        """
        print( "Dropping Payload" )
        self.SK.servo[ servo_x ].angle = angle
        time.sleep( 1 )
        print( "Dropped Payload" )

    def download_payload_coord( self, file_name ):
        
        with open( file_name, 'r' ) as file:
            for line in file:
                # Scan file each line
                latitude_match = re.search( r"Latitude of payload (\w+): (-?\d+\.\d+)", line )
                longitude_match = re.search( r"Longitude of payload (\w+): (-?\d+\.\d+)", line)
                compartment_match = re.search( r"Compartment of payload (\w+): (\d+)", line )

                # Save the waypoints onto an array
                if latitude_match:
                    print( "Latitude match found:", latitude_match.group() )
                    latitude = float( latitude_match.group(2) )
                    self.payload_delivery_latitude.append(latitude)
                
                if longitude_match:
                    print( "Longitude match found:", longitude_match.group() )
                    longitude = float( longitude_match.group(2) )
                    self.payload_delivery_longitude.append(longitude)

                if compartment_match:
                    print( "Compartment match found:", compartment_match.group() )
                    compartment = int( compartment_match.group(2) )
                    self.payload_delivery_compartment.append(compartment)

    def deliver_payload_command(self):
        file_path = '/home/uhdt/UAV_software/Autonomous/Official/FINAL CODE/payload_coord.txt'

        while not os.path.exists( file_path ):
            print( "Waiting for file" )
            time.sleep( 1 )

        self.download_payload_coord( file_path )
        time.sleep( 5 )

        print( "Starting Payload Delivery Mission" )

        payloads_dropped = 0

        for i in range( len( self.payload_delivery_latitude ) ):

            print( f"Heading to payload #{i + 1}" )
            self.send_global_position_target(self.payload_delivery_latitude[i], self.payload_delivery_longitude[i], self.alt_AD)

            rospy.loginfo(f"Waiting for waypoint {i} to be reached...")
            self.waypoint_reached_event.wait()

            time.sleep( 2 )

            self.gpio_servo_command( self.payload_delivery_compartment[i], 0 )
            payloads_dropped += 1
            print( f"Payload #{i + 1} Delivered" )

            time.sleep( 10 )

            if payloads_dropped <= 3:

                print( "Performing Waypoint Lap" )
                self.dk_waypoint_lap()
                print( "Waypoint Lap completed " )

        print( "Payload Delivery Mission Completed" )
            

    def send_global_position_target(self, lat, lon, alt):
        msg = GlobalPositionTarget()
        msg.header.stamp = rospy.Time.now()
        msg.coordinate_frame = 6
        msg.type_mask = 4088

        msg.latitude = lat  # Latitude
        msg.longitude = lon  # Longitude
        msg.altitude = alt  # Altitude

        self.pub.publish(msg)
        rospy.loginfo("Sent Waypoint")

    def waypoint_lap(self):

        start = time.time()

        rospy.loginfo("=====Waypoint Lap Starting!=====")
        for i, (lat, lon, alt) in enumerate(self.waypoints):
            self.waypoint_reached_event.clear()  # Reset the event
            rospy.loginfo(f"Sending Waypoint {i}")
            self.send_global_position_target(lat, lon, alt)

            # Wait until the drone reaches this waypoint
            rospy.loginfo(f"Waiting for waypoint {i} to be reached...")
            self.waypoint_reached_event.wait()
        
        end = time.time()
        difference = end - start
        self.waypoint_lap_time.append(difference)
            
        rospy.loginfo("Waypoint Lap Completed!")
    
    def search_area_command(self):
        """
        Define a search area waypoint. It will use the waypoint_reached() function to determine if the UAS arrived at location
        and then collect UAS attitude data, trigger camera and geotag image.
        This method defines a search area waypoint.

        :return: None
        """
        start = time.time()
        rospy.loginfo('--Now conducting the search area--')

        # Traverse through search area waypoints
        # Print index
        # Print coords and alt
        # Move to waypoint
        # Check for reached
        # Print DONE WITH SEARCH AREA WAYPOINT {index}
        # Get attitude
        # Trigger Camera
        # Geotag
        # Copy image into directory

        for i, (lat, lon, alt) in enumerate(self.search_area_waypoints):
            self.waypoint_reached_event.clear()  # Reset the event

            rospy.loginfo(f"Sending Waypoint {i}")
            rospy.loginfo(f"Lat: {lat}, Lon: {lon}, Alt: {alt}")

            self.send_global_position_target(lat, lon, alt)

            # Wait until the drone reaches this waypoint
            rospy.loginfo(f"Waiting for waypoint {i} to be reached...")
            self.waypoint_reached_event.wait()

            rospy.loginfo(f"DONE WITH SEARCH AREA WAYPOINT {i}")
            
            Camera.flight_testing(Camera.PRESETS, 2, self.geotag)
            rospy.loginfo("Triggered Camera")
            

        end = time.time()
        difference = end - start
        self.search_area_waypoint_time.append(difference)

        return print("UAS COMPLETED SEARCH THE AREA")

    def end_mission( self ):

        self.waypoint_reached_event.clear()
        self.send_global_position_target(self.end_mission_latitude, self.end_mission_longitude, self.end_mission_altitude)
        self.waypoint_reached_event.wait()
        rospy.loginfo("End Mission Waypoint Reached")


    def set_param(self, param_name, param_value):
        rospy.wait_for_service('/mavros/param/set')
        set_param_service = rospy.ServiceProxy('/mavros/param/set', ParamSet)

        param = ParamValue()
        param.integer = int(param_value)
        param.real = float(param_value)

        response = set_param_service(param_name, param)
        if response.success:
            rospy.loginfo(f"Sucessfully set Parameter {param_name} to {param_value}")
        else:
            rospy.loginfo(f"Failed to set parameter {param_name}")

    def sum(self, arr):
        """
        Calculate the sum of values in the input array.

        Args:
            arr (list): List of numeric values to be summed.

        Returns:
            float: The sum of values in the input list.
        """
        sum = 0
        for value in arr:
            sum += value
        return sum
    
    def avg(self, arr):
        """
        Calculate the average of values in the input array.

        Args:
            arr (list): List of numeric values to calculate the average from.

        Returns:
            float: The average of values in the input list.
        """
        if len(arr) == 0:
                return 0  # Avoid division by zero for an empty array

        total = sum(arr)
        average = total / len(arr)
        return average

    def export(self):
        """
        Export, Calculate and record the average and sum of execution times for various methods.

        Returns:
            None
        """
        #average calculation
        avg_attitude = self.avg(self.attitude_time)
        avg_geotag = self.avg(self.geotag_time)
        avg_search_area_waypoint = self.avg(self.search_area_waypoint_time)
        avg_subprocess_execute = self.avg(self.subprocess_execute_time)
        avg_waypoint_lap = self.avg(self.waypoint_lap_time)
        avg_payload_delivery_time = self.avg(self.payload_delivery_time)

        #sum calcualtion
        sum_attitude = self.sum(self.attitude_time)
        sum_geotag = self.sum(self.geotag_time)
        sum_search_area_waypoint = self.sum(self.search_area_waypoint_time)
        sum_subprocess_execute = self.sum(self.subprocess_execute_time)
        sum_waypoint_lap = self.sum(self.waypoint_lap_time)
        sum_payload_delivery_time = self.sum(self.payload_delivery_time)

            
        data_averages_and_time = [
            ("attitude", self.attitude_time, avg_attitude, sum_attitude),
            ("deliver_payload", self.deliver_payload_time, avg_payload_delivery_time,sum_payload_delivery_time ),
            ("geotag", self.geotag_time, avg_geotag,sum_geotag),
            ("search_area_waypoint", self.search_area_waypoint_time, avg_search_area_waypoint,sum_search_area_waypoint),
            ("subprocess_execute", self.subprocess_execute_time, avg_subprocess_execute,sum_subprocess_execute),
            ("waypoint_lap", self.waypoint_lap_time, avg_waypoint_lap,sum_waypoint_lap),

        ]
        # Edit this later
        with open('Data_log.txt', 'a') as file:
                for data_name, data_values, data_average, data_sum in data_averages_and_time:
                        file.write(f"{data_name}: {data_values}\n")
                        file.write(f"{data_name} average: {data_average} seconds\n")
                        file.write(f"{data_name} sum: {data_sum} seconds\n\n")



if __name__ == '__main__':
    mission = WaypointMission()
        
    mission.set_param('WPNAV_SPEED', 1000) #cm/s
    mission.set_param('WPNAV_SPEED_DN', 500) #cm/s
    mission.set_param('WPNAV_SPEED_UP', 500) #cm/s
    mission.set_param('GUID_OPTIONS', 64)
    

    #mission.is_armed()
    #mission.is_guided()

    #mission.waypoint_lap()

    #Camera.flight_testing(Camera.PRESETS, 1, mission.geotag)

    mission.attitude()
    
    #mission.search_area_command()
    #mission.end_mission()

    rospy.loginfo("Mission Completed!")
    rospy.spin()

        

